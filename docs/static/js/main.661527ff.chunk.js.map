{"version":3,"sources":["components/AddCategory.jsx","helpers/getGifs.js","components/GifGridItem.jsx","components/GifGrid.jsx","hooks/useFetchGifs.js","GifExpertApp.jsx","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","categories","type","onChange","target","value","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setstate","useEffect","fetchData","useFetchGifs","key","GifExpertApp","cat","ReactDOM","render","document","getElementById"],"mappings":"6MAkCeA,EA9BK,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EACHC,mBAAS,IADN,mBAChCC,EADgC,KACpBC,EADoB,KAevC,OACI,0BAAMC,SATW,SAAAC,GACjBA,EAAEC,iBACEJ,EAAWK,OAAOC,OAAS,IAC3BR,GAAe,SAAAS,GAAU,OAAMP,GAAN,mBAAqBO,OAC9CN,EAAc,OAMd,2BACIO,KAAK,OACLC,SAhBc,SAAAN,GACtBF,EAAeE,EAAEO,OAAOC,QAgBhBA,MAAQX,M,uBCxBXY,EAAO,uCAAG,WAAMC,GAAN,uBAAAC,EAAA,6DACbC,EADa,mGACsFC,UAAWH,IADjG,SAEAI,MAAMF,GAFN,cAEbG,EAFa,gBAGIA,EAAKC,OAHT,uBAGXC,EAHW,EAGXA,KAEFC,EAAOD,EAAKE,KAAI,SAAAC,GAAQ,IAAD,EACzB,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QATvB,kBAaZM,GAbY,4CAAH,sDCEPO,EAAc,SAAC,GAAuB,EAArBJ,GAAsB,IAAlBC,EAAiB,EAAjBA,MAAOV,EAAU,EAAVA,IACrC,OACI,yBAAKc,UAAU,iDACX,yBAAKC,IAAMf,EAAMgB,IAAMN,IACvB,2BAAKA,KCqBFO,EAtBC,SAAC,GAAkB,IAAhBnB,EAAe,EAAfA,SAAe,ECFN,SAAAA,GAAa,IAAD,EACVd,mBAAS,CAC/BqB,KAAM,GACNa,SAAS,IAHuB,mBAC7BC,EAD6B,KACtBC,EADsB,KAiBpC,OAXAC,qBAAU,WAAM,4CACZ,4BAAAtB,EAAA,sEACuBF,EAAQC,GAD/B,OACUQ,EADV,OAEIc,EAAS,CACLf,KAAMC,EACNY,SAAS,IAJjB,4CADY,uBAAC,WAAD,wBAQZI,KACD,CAACxB,IAEGqB,EDd0BI,CAAazB,GAAjCa,EADiB,EACtBN,KAAaa,EADS,EACTA,QAErB,OACI,oCACI,wBAAIJ,UAAU,4CAA4ChB,GAExDoB,GAAW,uBAAGJ,UAAU,wCAAb,WAEb,yBAAKA,UAAU,aAEXH,EAAOJ,KAAI,SAAAC,GAAG,OAAI,kBAAC,EAAD,eAAagB,IAAMhB,EAAIC,IAAUD,UEOpDiB,EAlBM,WAAO,IAAD,EAEazC,mBAAS,CAAC,cAFvB,mBAEhBQ,EAFgB,KAEJT,EAFI,KAIvB,OACI,6BACI,4CACI,kBAAC,EAAD,CAAaA,cAAgBA,IACjC,6BACA,4BAEQS,EAAWe,KAAI,SAAAmB,GAAG,OAAI,kBAAC,EAAD,CAASF,IAAKE,EAAK5B,SAAU4B,UCXvEC,IAASC,OACP,oCACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,U","file":"static/js/main.661527ff.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { useState } from 'react';\r\n\r\nconst AddCategory = ({ setCategories }) => {\r\n    const [inputValue, setInputValue] = useState('');\r\n\r\n    const handleInputChange = e => {\r\n        setInputValue( e.target.value );\r\n    }\r\n\r\n    const handleSubmit = e => {\r\n        e.preventDefault();\r\n        if (inputValue.trim().length > 2) {\r\n            setCategories( categories => [ inputValue, ...categories ] );\r\n            setInputValue('');\r\n        }\r\n    }\r\n\r\n    return ( \r\n        <form onSubmit={ handleSubmit }>\r\n            <input \r\n                type=\"text\"\r\n                onChange={ handleInputChange }\r\n                value={ inputValue }\r\n            />\r\n        </form>\r\n     );\r\n}\r\n\r\nAddCategory.propTypes= {\r\n    setCategories: PropTypes.func.isRequired,\r\n}\r\n \r\nexport default AddCategory;","export const getGifs = async category => {\r\n    const url = `https://api.giphy.com/v1/gifs/search?api_key=5n7liaUmMNVXyJVdkDPyE2p886J00h9h&limit=10&q=${ encodeURI( category ) }`;\r\n    const resp = await fetch(url);\r\n    const { data } = await resp.json();\r\n\r\n    const gifs = data.map(img => {\r\n        return {\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images?.downsized_medium.url\r\n        }\r\n    });\r\n\r\n    return gifs;\r\n}","import React from 'react'\r\n\r\nexport const GifGridItem = ({ id, title, url }) => {\r\n    return (\r\n        <div className=\"card animate_animated animate__fadeInRightBig\">\r\n            <img src={ url } alt={ title }/>\r\n            <p>{ title }</p>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { useFetchGifs } from '../hooks/useFetchGifs';\r\nimport { GifGridItem } from './GifGridItem';\r\n\r\nconst GifGrid = ({ category }) => {\r\n    const { data:images, loading } = useFetchGifs(category);\r\n\r\n    return (\r\n        <>\r\n            <h3 className=\"animate_animated animate__fadeInRightBig\">{category}</h3>\r\n\r\n            { loading && <p className=\"card animate_animated animate__flash\">Loading</p> }\r\n\r\n            <div className=\"card-grid\">\r\n            {\r\n                images.map(img => <GifGridItem key={ img.id } { ...img } />)\r\n            }\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nGifGrid.propTypes = {\r\n    category: PropTypes.string.isRequired\r\n}\r\n\r\nexport default GifGrid\r\n","import { useState, useEffect } from \"react\";\r\nimport { getGifs } from \"../helpers/getGifs\";\r\n\r\nexport const useFetchGifs = category => {\r\n    const [state, setstate] = useState({\r\n        data: [],\r\n        loading: true\r\n    });\r\n\r\n    useEffect(() => {\r\n        async function fetchData() {\r\n            const gifs = await getGifs(category);\r\n            setstate({\r\n                data: gifs,\r\n                loading: false\r\n            });\r\n        }\r\n        fetchData();\r\n    }, [category]);\r\n\r\n    return state;\r\n}","import React from 'react';\r\nimport { useState } from 'react';\r\nimport AddCategory from './components/AddCategory';\r\nimport GifGrid from './components/GifGrid';\r\n\r\nconst GifExpertApp = () => {\r\n\r\n    const [categories, setCategories] = useState(['One Punch'])\r\n\r\n    return ( \r\n        <div>\r\n            <h2>GifExpertApp</h2>\r\n                <AddCategory setCategories={ setCategories } />\r\n            <hr/>\r\n            <ol>\r\n                {\r\n                    categories.map(cat => <GifGrid key={cat} category={cat} />)\r\n                }\r\n            </ol>\r\n        </div>\r\n     );\r\n}\r\n \r\nexport default GifExpertApp;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport GifExpertApp from './GifExpertApp';\n\nReactDOM.render(\n  <>\n    <GifExpertApp />\n  </>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}